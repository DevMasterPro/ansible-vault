---
# File: tasks/main.yml - Main tasks for Vault

- name: Check distribution compatibility
  fail:
    msg: "{{ ansible_distribution }} is not supported by this role"
  when: ansible_distribution not in ['RedHat', 'CentOS', 'Debian', 'Ubuntu']

- name: Fail if not a new release of Red Hat / CentOS
  fail:
    msg: "{{ ansible_distribution_version }} is not an acceptable version of {{ ansible_distribution }} for this role"
  when: ansible_distribution in ['RedHat', 'CentOS'] and ansible_distribution_version|version_compare(7, '<')

- name: Fail if not a new release of Debian
  fail:
    msg: "{{ ansible_distribution_version }} is not an acceptable version of {{ ansible_distribution }} for this role"
  when: ansible_distribution == "Debian" and ansible_distribution_version|version_compare(8.5, '<')

- name: Fail if not a new release of Ubuntu
  fail:
    msg: "{{ ansible_distribution_version }} is not an acceptable version of {{ ansible_distribution }} for this role"
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version|version_compare(13.04, '<')

- name: Create cluster groupings
  group_by: key=os_{{ ansible_os_family }}

- name: "Add Vault user"
  user: name=vault comment="Vault user" uid=1043 group=bin

- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: Install specified packages  
  include: install.yml

- name: Enable non root mlock capability
  command: "setcap cap_ipc_lock=+ep {{ vault_bin_path }}/vault"

- name: Vault directory
  file: "dest=/opt/vault state=directory owner={{ vault_user }} group={{ vault_group}}"

- name: Vault data directory
  file: "dest=/var/vault state=directory owner={{ vault_user }} group={{ vault_group}}"

- name: Vault log directory
  file: "dest=/var/log/vault state=directory owner={{ vault_user }} group={{ vault_group}}"

- name: Vault PID directory
  file: "dest=/var/run/vault state=directory owner={{ vault_user }} group={{ vault_group}}"

- name: Vault dot d directory
  file: "dest=/etc/vault.d state=directory owner={{ vault_user }} group={{ vault_group}}"

- name: Vault server configuration
  template: src=vault_main.hcl.j2 dest={{ vault_config_path }}/vault_main.hcl
  
  
# determine init system is in use
- name: detect sysv init system
  set_fact: service_type=sysv
  when: ansible_distribution in ['RedHat', 'CentOS', 'ScientificLinux'] and (ansible_distribution_version|version_compare('6', '>=') and ansible_distribution_version|version_compare('7', '<'))
- name: detect systemd init system
  set_fact: service_type=systemd
  when: (ansible_distribution in ['RedHat', 'CentOS', 'ScientificLinux'] and (ansible_distribution_version|version_compare('7', '>=') and ansible_distribution_version|version_compare('8', '<'))) or ansible_distribution == 'Fedora' or (ansible_distribution == 'Ubuntu' and ansible_distribution_version|version_compare('15.04', '>=')) or (ansible_distribution == 'Debian' and ansible_distribution_version|version_compare('8', '>=')) or ansible_os_family == 'Suse'
- name: detect upstart init system
  set_fact: service_type=upstart
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version|version_compare('15.04', '<')

- name: SYSV init script
  template: src=vault_sysvinit.j2 dest=/etc/init.d/vault owner=root group=root mode=755
  when: service_type == "sysv"

- name: Debian init script
  template: src=vault_debian.init.j2 dest=/etc/init.d/vault owner=root group=root mode=755
  when: service_type == "sysv" and ansible_distribution == 'Debian'

- name: upstart script
  template: src=vault_upstart.service.j2 dest=dest=/etc/init/vault.conf owner=root group=root mode=755
  when: service_type == "upstart"

- name: systemd script
  template: src=vault_systemd.service.j2 dest=/lib/systemd/system/vault.service owner=root group=root mode=644
  when: service_type == "systemd"

- name: Start Vault
  service: name=vault state=started enabled=yes

- name: Vault running?
  wait_for: port=8200 delay=10
